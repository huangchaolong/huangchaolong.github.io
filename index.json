[{"content":"解决wsl2重启 内网ip发生变化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  @echo off setlocal enabledelayedexpansion wsl --shutdown ubuntu ::重新拉起来，并且用root的身份，启动ssh服务和docker服务 wsl -u root service docker start | findstr \u0026#34;Starting Docker\u0026#34; \u0026gt; nul if !errorlevel! equ 0 ( echo docker start success :: 看看我要的IP在不在 wsl -u root ip addr | findstr \u0026#34;172.12.0.2\u0026#34; \u0026gt; nul if !errorlevel! equ 0 ( echo wsl ip has set ) else ( wsl -u root ip addr add 172.12.0.2/24 broadcast 172.12.0.0 dev eth0 label eth0:1 echo set wsl ip success: 172.12.0.2 ) ::windows作为wsl的宿主，在wsl的固定IP的同一网段也给安排另外一个IP ipconfig | findstr \u0026#34;172.12.0.1\u0026#34; \u0026gt; nul if !errorlevel! equ 0 ( echo windows ip has set ) else ( netsh interface ip add address \u0026#34;vEthernet (WSL)\u0026#34; 172.12.0.1 255.255.255.0 echo set windows ip success: 172.12.0.1 ) ) pause   ","description":"","id":0,"section":"blog","tags":["wsl"],"title":"wsl2固定ip","uri":"https://huangchaolong.github.io/blog/wsl2%E5%9B%BA%E5%AE%9Aip/"},{"content":"第三方包 1  go.uber.org/zap   zap记录日志  uber 开源的高性能日志库，面向高性能  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  package boot import ( \u0026#34;fmt\u0026#34; \u0026#34;path\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/xiaohubai/alpha/config\u0026#34; zaprotatelogs \u0026#34;github.com/lestrrat-go/file-rotatelogs\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; \u0026#34;go.uber.org/zap/zapcore\u0026#34; ) var level zapcore.Level // Zap 日志组件 func Zap() (logger *zap.Logger) { level = zap.InfoLevel logger = zap.New(getEncoderCore()) logger.WithOptions(zap.AddCaller()) return logger } func getEncoderCore() (core zapcore.Core) { writer, err := GetWriteSyncer() // 使用file-rotatelogs进行日志分割 \tif err != nil { panic(fmt.Errorf(\u0026#34;Get Write Syncer Failed err:%v\u0026#34;, err.Error())) } return zapcore.NewCore(zapcore.NewJSONEncoder(getEncoderConfig()), writer, level) } func getEncoderConfig() (cfg zapcore.EncoderConfig) { cfg = zapcore.EncoderConfig{ MessageKey: \u0026#34;trace_id\u0026#34;, LevelKey: \u0026#34;level\u0026#34;, TimeKey: \u0026#34;time\u0026#34;, NameKey: \u0026#34;logger\u0026#34;, CallerKey: \u0026#34;caller\u0026#34;, StacktraceKey: config.CONFIG.Zap.StacktraceKey, LineEnding: zapcore.DefaultLineEnding, //默认换行 \tEncodeLevel: zapcore.LowercaseLevelEncoder, //小写 \tEncodeTime: CustomTimeEncoder, //输出时间 \tEncodeDuration: zapcore.SecondsDurationEncoder, EncodeCaller: zapcore.FullCallerEncoder, //记录调用路径 \t} return cfg } // 自定义日志输出时间格式 func CustomTimeEncoder(t time.Time, enc zapcore.PrimitiveArrayEncoder) { enc.AppendString(t.Format(\u0026#34;2006-01-02 15:04:05.000\u0026#34;)) } // GetWriteSyncer 日志分割 func GetWriteSyncer() (zapcore.WriteSyncer, error) { fileWriter, err := zaprotatelogs.New( path.Join(config.CONFIG.Zap.Director, \u0026#34;%Y-%m-%d.log\u0026#34;), zaprotatelogs.WithLinkName(config.CONFIG.Zap.LinkName), zaprotatelogs.WithMaxAge(30*24*time.Hour), //日志清除时间 \tzaprotatelogs.WithRotationTime(24*time.Hour), //日志文件创建时间 \t) return zapcore.AddSync(fileWriter), err }   ","description":"","id":1,"section":"blog","tags":["zap"],"title":"zap格式化日志","uri":"https://huangchaolong.github.io/blog/zap/"},{"content":"？？？？？\n","description":"","id":2,"section":"blog","tags":["zap"],"title":"测试2","uri":"https://huangchaolong.github.io/blog/%E9%9D%99%E9%9D%99%E6%82%84%E6%82%84/"},{"content":"安装go程序\ncd wget https://studygolang.com/dl/golang/go1.17.3.linux-amd64.tar.gz sudo tar -C /usr/local -xzf go1.17.3.linux-amd64.tar.gz 部署go环境\ncd vim /etc/profile export GOPATH=/home/hcl/go export GOBIN=/home/hcl/go/bin export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin:$GOPATH/bin export GOPROXY=https://goproxy.io,direct 创建文件\nmkdir -p gopath/bin 解压blog博客安装包\n解压到：/home/hcl cd blog rm -rf public 安装部署hugo\nsudo apt-get update sudo apt-get install hugo hugo hugo server //本地预览 hugo version //查看版本 ","description":"","id":3,"section":"docs","tags":["go"],"title":"go安装及部署","uri":"https://huangchaolong.github.io/docs/go%E5%AE%89%E8%A3%85%E5%8F%8A%E9%83%A8%E7%BD%B2/"},{"content":"##抽数\nsu hdfs #查看定时任务是否执行\n通过命令查看：grep “查询的名称” 查询路径\ngrep \u0026quot;test.txt\u0026quot; /var/log/cron #查看tomcat版本\nbin下执行./version.sh #删除日志sh\nexport JAVA_HOME=/usr/local/java\nexport PATH=$JAVA_HOME/bin:$PATH\nfind /root/hdr/V5logs -name \u0026ldquo;*.log\u0026rdquo; -mtime +4 -exec rm -rf {} ;\n#定时任务设置\ncrontab -e #设置定时任务时间以及每天导出日志文件到home/spark/logs文件下\n00 17 * * * /home/spark/sparkToSqlserverIncrement_crontab.sh \u0026gt;\u0026gt;/home/spark/logs/$(date +\\%Y\\%m\\%d).log 2\u0026gt;\u0026amp;1 #定时任务查看\ncrontab -l #查看进程 kill进程\nps -ef|grep 8083 kill -9 进程 #查看sh文件格式\n:set ff #修改sh文件格式\n:set ff=unix #统一视图单点登录配置路径\n/usr/local/tomcats/tomcat-8086/webappsrcivcurity/singlelogin.jsp #统一视图：就诊视图-》医嘱-》执行记录：操作列，是否显示配置（0/1）\nCIV_CATEGARY_ORDER_SHOW_CONFIG #solr清空语句\n\u0026lt;delete\u0026gt;\u0026lt;query\u0026gt;*:*\u0026lt;/query\u0026gt;\u0026lt;/delete\u0026gt; \u0026lt;commit/\u0026gt; #定时任务：抽取V5的患者主索引到数据中心，并导出根据日期生成的log日志\n00 14 * * * /root/hdr/importDataToHbase/run-v5.sh\u0026gt;\u0026gt;/root/hdr/V5logs/$(date +\\%Y\\%m\\%d).log 2\u0026gt;\u0026amp;1 #一、登录hbase：\nhbase shell #二、hbase表的使用\n查看表： list 禁用表：disable 'HDR_EMR_CONTENT' 删除表：（需要先禁用）:drop 'HDR_EMR_CONTENT' 建表语句：create 'HDR_EMR_CONTENT',{NAME =\u0026gt; 'cf',COMPRESSION =\u0026gt; 'snappy'},{SPLITS =\u0026gt;['0588','1176','1764','2352','2940','3528','4116','4704','5292','5880','6468','7056','7644','8232','8820','9408']} 启用表: enable 'HDR_EMR_CONTENT' 统计表中数据条数： count 'HDR_EMR_CONTENT' 删除表中某条数据：deleteall '表名','rowkey' deleteall 'HDR_ALLERGY','5196|418205134|2116915|1|1351064|101|418205134.HIS' deleteall 'HDR_ALLERGY','5196|418205134|2116915|1|1351064|600013734|418205134.HIS '\n#三、退出 hbase 运行 exit 指令\n#四、运行 抽取数据的sqoop语句 su hdfs\n#五、Hbase修改表名\n因为hbase中没有rename命令，所以更改表名比较复杂。重命名主要通过hbase的快照功能。\n 1.停止表继续插入 hbase shell\u0026gt;disable 'tableName' 2.制作快照 hbase shell\u0026gt; snapshot 'tableName', 'tableSnapshot' 3.克隆快照为新的名字 hbase shell\u0026gt; clone_snapshot 'tableSnapshot', 'newTableName' 4.删除快照 ##确认无用再删除 hbase shell\u0026gt; delete_snapshot 'tableSnapshot' 5.删除原来表 ##确认无用再删除 hbase shell\u0026gt; drop 'tableName'  BI_MZFSZF disable 'BI_MZFSZF' drop 'BI_MZFSZF' create 'BI_MZFSZF',{NAME =\u0026gt; 'cf',COMPRESSION =\u0026gt; 'snappy'},{SPLITS =\u0026gt;['0588','1176','1764','2352','2940','3528','4116','4704','5292','5880','6468','7056','7644','8232','8820','9408']} enable 'BI_MZFSZF' ","description":"","id":4,"section":"jiahe","tags":["zap"],"title":"HDR-数据中心常规操作","uri":"https://huangchaolong.github.io/jiahe/hdr-%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"},{"content":"##医共体数据中心数据库地址：\n 192.168.21.2:4000 数据库：jhygt 用户：dbadmin 密码：  #查看定时任务是否执行\n通过命令查看：grep “查询的名称” 查询路径\n grep \u0026ldquo;test.txt\u0026rdquo; /var/log/cron  #集群操作\n 启动集群 tiup cluster start tidb-formal (实例名) 查看集群 tiup cluster display tidb-formal (实例名) 关闭集群 tiup cluster stop tidb-formal (实例名)  #集群清单：\n 192.168.21.2（对外：数据库） 192.168.21.3 192.168.21.4 192.168.21.5 192.168.21.6 192.168.21.7（集群中控台：在此进行集群操作）  #医共体数据中心主题库涉及表：\n ST_TABLE_THEME_INFO ST_TABLE_THEME_TARGET_INFO  在手动运行中心主题库时候新增上：update\n#任务调度中心地址：\nhttp://192.168.21.13:8772/xxl-job-admin/toLogin admin/admin\n#医共体数据中心运营分析涉及表：\n 指标配置表：DSV_KPI_SQL_CONFIG 指标记录表-日：DSV_KPI_DATA_DAY 指标记录表-月：DSV_KPI_DATA_MONTH 指标记录表-年：DSV_KPI_DATA_YEAR  使用文档：BI任务调度与配置V1.0-用户手册\n#医共体数据中心对外接口地址配置表：\n DSV_NSI_MESSAGE  #大屏部署目录：\ncd/ cd /home/servers/local/apache-tomcat-8.5.76/webapps/webroot/WEB-INF/reportlets/  新技术、新项目开展详情：（滚动图）BI_NEWPROJECT_DETAIL 医共体卫生资源监测、医共体服务能力监测：BI_REPORT_DATA  #医共体数据中心：双向转诊记录表配置表：\n DUR_REFERRAL_INFO  #医共体全息视图：\n第三方调阅的可视化配置对应存储位置表：\n（全息配置表：EN_HOLOGRAM_VIEW_CONFIG；模块调阅url配置表：EN_IMPACTION_VIEW_URL）； ##医共体数据中心应用服务启动文档\n##服务器IP地址：192.168.21.13\n注册中心，第一个启动:\nnohup java -jar /home/servers/local/agent/XFoundationXRegistrationAgent-4.0.0.jar \u0026gt; /home/servers/local/agent/log.txt \u0026amp; 网关服务:\nnohup java -jar /home/servers/local/gateway/XDataIntelligenceXGateway-1.0.0.jar \u0026gt; /home/servers/local/gateway/log.txt \u0026amp; 用户管理:\nnohup java -jar /home/servers/local/userManage/XDataIntelligenceXUserManagement-1.0.0.jar \u0026gt; /home/servers/local/userManage/log.txt \u0026amp; 登录模块:\nnohup java -jar /home/servers/local/base/XDataIntelligenceXBase-1.0.0.jar \u0026gt; /home/servers/local/base/log.txt \u0026amp; 全息病历:\nnohup java -jar /home/servers/local/clinical/XDataIntelligenceXClinical-1.0.0.jar \u0026gt; /home/servers/local/clinical/log.txt \u0026amp; 主数据管理:\nnohup java -jar /home/servers/local/mainData/XDataIntelligenceXMainData-1.0.0.jar \u0026gt; /home/servers/local/mainData/log.txt \u0026amp; 大屏模块:\nnohup java -jar /home/servers/local/bigScreen/XDataIntelligenceXBigScreen-0.0.1-SNAPSHOT.jar \u0026gt; /home/servers/local/bigScreen/log.txt \u0026amp; 双向转诊:\nnohup java -jar /home/servers/local/dualReferral/XDataIntelligenceXDualReferral-1.0.0.jar \u0026gt; /home/servers/local/dualReferral/log.txt \u0026amp; 数据对外服务:\nnohup java -jar /home/servers/local/dataServices/XDataIntelligenceXDataService-1.0.0.jar \u0026gt; /home/servers/local/dataServices/log.txt \u0026amp; 自动执行任务模块(两个按顺序执行):\nnohup java -jar /home/servers/local/job-admin/xxl-job-admin-2.2.1-SNAPSHOT.jar \u0026gt; /home/servers/local/job-admin/log.txt \u0026amp; nohup java -jar /home/servers/local/job-exec/xxl-job-executor-sample-springboot-2.2.0.jar \u0026gt; /home/servers/local/job-exec/log.txt \u0026amp; tomcat：\ncd /home/servers/local/apache-tomcat-8.5.76/bin/ sh startup.sh nginx:\ncd /usr/local/nginx/sbin ./nginx 停止操作-jar包:\nps -ef|grep java kill -9 进程号(进程号为上一个命令查出的第二列的数字,需要关掉哪个模块，就输入哪个的进程号,模块根据最后一列jar包模块确认) 停止操作-tomcat：：\ncd /home/servers/local/apache-tomcat-8.5.76/bin/ sh shutdown.sh 停止操作-nginx:：\ncd /usr/local/nginx/sbin ./nginx -s stop 部署前端(启动时不用执行,部署前端包时执行)：\n解压：unzip -o\n/home/servers/local/dist/5.18-1.zip -d /home/servers/local/dist/xdata-intelligence-view 复制：\\cp -rf\n/home/servers/local/dist/xdata-intelligence-view/dist/. /home/servers/local/dist/xdata-intelligence-view ","description":"","id":5,"section":"jiahe","tags":["zap"],"title":"TIDB-医共体数据中心常规操作","uri":"https://huangchaolong.github.io/jiahe/tidb-%E5%8C%BB%E5%85%B1%E4%BD%93%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"}]